#!/usr/bin/env python2
# -*- coding: utf-8 -*-

description = """
A color scheme generator.

Takes an image and grabs the most dominant colors using kmeans.
Also creates bold colors by adding value to the dominant colors.
Finally, generates an HTML preview of the color scheme.
"""

import os
import webbrowser
from tempfile import NamedTemporaryFile
from argparse import ArgumentParser
from PIL import Image, ImageColor
from itertools import chain
from numpy import array
from scipy.cluster.vq import kmeans
from colorsys import rgb_to_hsv, hsv_to_rgb

DEFAULT_NUM_COLORS = 6
DEFAULT_MINV = 170
DEFAULT_MAXV = 200
DEFAULT_BOLD_ADD = 40
DEFAULT_FONT_SIZE = 1
DEFAULT_BG = '#272727'

THUMB_SIZE = (200, 200)
SCALE = 256.0
down_scale = lambda x: x / SCALE
up_scale = lambda x: int(x * SCALE)
hexify = lambda rgb: '#%s' % ''.join('%02x' % p for p in rgb)

def get_colors(img):
  """
  Returns a list of all the image's colors with multiplicity.
  """
  w, h = img.size
  return [color[:3] for count, color in img.convert('RGB').getcolors(w * h)]

def clamp(color, min_v, max_v):
  """
  Clamps a color such that the value is between min_v and max_v.
  """
  h, s, v = rgb_to_hsv(*map(down_scale, color))
  min_v, max_v = map(down_scale, (min_v, max_v))
  v = min(max(min_v, v), max_v)
  return tuple(map(up_scale, hsv_to_rgb(h, s, v)))

def order_by_hue(colors):
  """
  Orders colors by hue.
  """
  hsvs = [rgb_to_hsv(*map(down_scale, color)) for color in colors]
  hsvs.sort(key=lambda t: t[0])
  return [tuple(map(up_scale, hsv_to_rgb(*hsv))) for hsv in hsvs]

def brighten(color, brightness):
  """
  Adds or subtracts value to a color.
  """
  h, s, v = rgb_to_hsv(*map(down_scale, color))
  return tuple(map(up_scale, hsv_to_rgb(h, s, v + down_scale(brightness))))

def colorz(filename,
           n=DEFAULT_NUM_COLORS,
           min_v=DEFAULT_MINV,
           max_v=DEFAULT_MAXV,
           bold_add=DEFAULT_BOLD_ADD):
  """
  Get the n most dominant colors of an image.
  Clamps value to between min_v and max_v.

  Creates bold colors using bold_add.
  Total number of colors returned is 2*n, ordered by hue.
  Returns as a list of pairs.

  For terminal colors, the hue order is:
  red, yellow, green, cyan, blue, magenta
  """
  img = Image.open(filename)
  img.thumbnail(THUMB_SIZE)

  obs = array(get_colors(img))
  clusters, _ = kmeans(obs.astype(float), n)
  clamped = [clamp(color, min_v, max_v) for color in clusters]
  ordered = order_by_hue(clamped)
  return zip(ordered, [brighten(c, bold_add) for c in ordered])

def html_preview(fp, colors, font_size=DEFAULT_FONT_SIZE,
                 bg=DEFAULT_BG, bg_img=None):
  """
  Creates an html preview of each color.
  """
  # Create the main body
  body = '\n'.join(map(lambda c: """
    <div style="display: inline-block; float: left; margin: 1rem;
                text-align: center; color: {color}">
      <div style="margin-bottom: 1rem;">
         &nbsp;&nbsp;&nbsp;▄▄▄&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br />
         &nbsp;&nbsp;▀█▀██&nbsp;&nbsp;▄&nbsp;<br />
         ▀▄██████▀&nbsp;&nbsp;<br />
         &nbsp;&nbsp;&nbsp;▀█████&nbsp;&nbsp;<br />
         &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;▀▀▀▀▄<br />
      </div>
      <div>
        {color}
      </div>
      <div style="color: {color_bold}">
        <strong>{color_bold}</strong>
      </div>
    </div>
  """.format(color=hexify(c[0]), color_bold=hexify(c[1])), colors))

  # Change background if needed
  if bg_img:

    # Add a "terminal window" to the body
    body = """
    <div style="text-align: center">
      <div style="background: {bg}; padding: 1rem;
                  display:inline-block; width: 75%;
                  -webkit-box-shadow: 0 0 1em 0 rgba(0, 0, 0, 0.75);
                  -moz-box-shadow:    0 0 1em 0 rgba(0, 0, 0, 0.75);
                  box-shadow:         0 0 1em 0 rgba(0, 0, 0, 0.75);">
        <img src="{bg_img}" style="width: 100%;
                  -webkit-box-shadow: 0 0 1em 0 rgba(0, 0, 0, 0.75);
                  -moz-box-shadow:    0 0 1em 0 rgba(0, 0, 0, 0.75);
                  box-shadow:         0 0 1em 0 rgba(0, 0, 0, 0.75);" />
        {body}
      </div>
    </div>
    """.format(bg=bg, bg_img=bg_img, body=body)

    # Change the root bg to the bg_img
    if os.path.isfile(bg_img):
      bg = "url('file://%s')" % bg_img
    else:
      bg = "url('%s')" % bg_img

  # Write the file
  fp.write("""
    <!DOCTYPE html>
    <html style="height: 100%">
      <head>
        <title>
          Colorscheme Preview
        </title>
        <meta charset="utf-8">
      </head>
      <body style="background: {bg};
                  height: 100%;
                  background-size: cover;
                  background-repeat: no-repeat;
                  background-position: center center;
                  background-attachment: fixed;
                  font-family: monospace; font-size: {font_size}rem;
                  line-height: 1">
        <div style="padding: 1rem; display: inline-block">
          {body}
        </div>
      </body>
    </html>
  """.format(font_size=font_size, bg=bg, bg_img=bg_img, body=body))

def parse_args():
  parser = ArgumentParser(description=description)
  parser.add_argument('image',
                      help="""
                      the image file to generate from.
                      """,
                      type=str)
  parser.add_argument('-n',
                      help="""
                      number of colors to generate (excluding bold).
                      """,
                      dest='num_colors',
                      type=int,
                      default=DEFAULT_NUM_COLORS)
  parser.add_argument('--minv',
                      help="""
                      minimum value for the colors.
                      """,
                      type=int,
                      default=DEFAULT_MINV)
  parser.add_argument('--maxv',
                      help="""
                      maximum value for the colors.
                      """,
                      type=int,
                      default=DEFAULT_MAXV)
  parser.add_argument('--bold',
                      help="""
                      how much value to add for bold colors.
                      """,
                      default=DEFAULT_BOLD_ADD)
  parser.add_argument('--font-size',
                      help="""
                      what font size to use, in rem.
                      """,
                      type=int,
                      default=DEFAULT_FONT_SIZE)
  parser.add_argument('--bg',
                      help="""
                      what background color to use, in hex format.
                      """,
                      default=DEFAULT_BG)
  parser.add_argument('--no-bg-img',
                      help="""
                      whether or not to use a background image in the
                      preview.
                      """,
                      action='store_true',
                      default=False)

  return parser.parse_args()

def main():
  args = parse_args()
  f = NamedTemporaryFile(mode='wt', suffix='.html', delete=False)
  colors = colorz(args.image, args.num_colors, args.minv, args.maxv,
                  args.bold)
  html_preview(f, colors, args.font_size, args.bg,
               os.path.abspath(args.image) if not args.no_bg_img else None)
  webbrowser.open('file://%s' % f.name)

# Main program: generate a temporary html preview, show it, then toss it
if __name__ == '__main__':
  main()
